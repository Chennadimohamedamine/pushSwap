void sortXB(stack **b)
{
    stack *l;
	
    if (!(*b) || !(*b)->next)
         return ;
    l = lastStack(*b);
    if ((*b)->index < l->index)
        rotate(b,'b');
    else if ((*b)->index < (*b)->next->index)
        swap(b,'b');
}

void partition(stack **a,stack **b,int size)
{
	int shu = size / 3 + (size % 3);
	int begin = 0;
	int j;
	while(stackSize(*a) > 3)
	{
		j = 0;
		while(j < size)
		{
			if((*a)->index >= begin && (*a)->index <= shu)
				push(b,a,'b');
			else
				rotate(a,'a');
			sortXB(b);
			j++;
		}
		size = stackSize(*a);
		begin = shu;
		shu += shu;
	}
}





















int get_me_position(int max ,stack *b,int half)
{
    int i;
	stack *b1;

    i = 0;
	b1 = b;
    while(i < half && b1)
    {
		if(b1->index == max)
			return (1);
		b1 = b1->next;
        i++;  
    }
	return 0;
}
// void headtop(stack **a,stack **b,int h,int max)
// {
// 	int i;

// 	i = 0;
// 	while (i <= h)
// 	{
// 		if ((*b)->index == max)
// 			{
// 				push(a,b,'a');
// 				max--;
// 			}
// 			else if((*b)->next->index == max)
// 			{
// 				swap(b,'b');
// 				push(a,b,'a');
// 				max--;
// 			}
// 		i++;
// 	}
// }
void get_me_back(stack **a,stack **b,int size)
{
	int max;
	int half;

	max = Max(*b);
	half = stackSize(*b) / 2;
	while(stackSize(*b) != 0)
	{
		if (get_me_position(max,*b,half))
		{
			if ((*b)->index == max)
			{
				push(a,b,'a');
				max--;
			}
			else if((*b)->next->index == max)
			{
				swap(b,'b');
				push(a,b,'a');
				max--;
			}
			else
				rotate(b,'b');
		}else
		{
			if((*b)->index == max)
			{
				push(a,b,'a');
				max--;
			}else
				reverseRotate(b,'b');
		}
		size = stackSize(*b);
		half = size / 2;
	}
}
void sortAll(stack **a,stack **b,int len)
{
	int i;
	 
	 i = 0;
	 while(stackSize(*a) > 0)
	 {
		if ((*a)->index == i)
		{
			push(b,a,'b');
			i++;
		}
		else if((*a)->index <= (i + len))
		{
			push(b,a,'b');
			rotate(b,'b');
			i++;
		}else
			rotate(a,'a');
	 }
	 get_me_back(a,b,stackSize(*b));
}
void sortX(stack **a,stack **b,int size)
{
	if(size <= 100)
		sortAll(a,b,10);
	else
		sortAll(a,b,20);
}



if(l->index == max)
		max--;
	if((*a)->index == max)
		rotate(a,'a');